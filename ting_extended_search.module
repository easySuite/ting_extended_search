<?php
/**
 * @file
 * Code for the Ting extended search feature.
 */

include_once 'ting_extended_search.features.inc';
/**
 * @file
 * Add extended search form.
 */
/**
 * Implements hook_menu().
 */
function ting_extended_search_menu() {
  $items = array();

  $items['admin/config/ting/extented_search'] = array(
    'title' => 'Ting extended search setting',
    'description' => 'Setting of ting extended search.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ting_extended_search_settings_form'),
    'access arguments' => array('access ting extended search settings'),
    'file' => 'ting_extended_search.admin.inc',
    'weight' => -10,
  );

  $items['admin/config/ting/extented_search/settings'] = array(
    'title' => 'Ting extended search setting',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );

  $items['admin/config/ting/extented_search/fields'] = array(
    'title' => 'Ting extended search fields',
    'description' => 'View and customize ting extended search fields.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ting_extended_search_settings_fields_form'),
    'access arguments' => array('access ting extended search settings'),
    'file' => 'ting_extended_search.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => -9,
  );

  $items['admin/config/ting/extented_search/display'] = array(
    'title' => 'Ting extended search display',
    'description' => 'View and customize  ting extended search display.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ting_extended_search_settings_display_form'),
    'access arguments' => array('access ting extended search settings'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'ting_extended_search.admin.inc',
    'weight' => -8,
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function ting_extended_search_permission() {
  return array(
    'access ting extended search settings' =>  array(
      'title' => t('Ting extented search settings'),
      'description' => t('Allows edit settings of ting extented search'),
    ),
  );
}

/**
 * Implements hook_theme().
 */
function ting_extended_search_theme($existing, $type, $theme, $path) {
  return array(
    'ting_ext_search_fields_table' => array(
      'render element' => 'form',
    ),
    'ting_ext_search_display_table' => array(
      'render element' => 'form',
    ),
  );
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function ting_extended_search_form_search_block_form_alter(&$form, &$form_state) {
  $ting_well_types = variable_get('ting_well_types', array());
  $ting_well_sources = variable_get('ting_well_sources', array());

  $type = _ding_provider_get_provider('reservation');
  $function = $type['module'] . '_' . (isset($type['prefix']) ? $type['prefix'] . '_' : '') . 'pickup_branches';
  if (module_exists($type['module'])) {
    module_load_include('inc', $type['module'], 'includes/' . $type['module'] . '.' . $type['prefix']);
  }

  $branch_arr = ($type && function_exists($function)) ? ding_provider_invoke('reservation', 'pickup_branches', FALSE, TRUE) : array();
  // For now only the FBS provider has implemented the black listing of the branches.
  // It will be considered only this provider. With the expectation that in the future
  // all the providers will implement this.
  $black_list_branches = variable_get($type['module'] . '_branches_blacklist', array());
  $branch_arr = array_filter($branch_arr, function ($id) use ($black_list_branches) {
    return empty($black_list_branches[$id]);
  },
    ARRAY_FILTER_USE_KEY);

  $type_arr = drupal_map_assoc($ting_well_types);
  $source_arr = drupal_map_assoc($ting_well_sources);

  asort($type_arr);
  asort($branch_arr);
  asort($source_arr);

  $options = array(
    'ting_well_types' => $type_arr,
    'ting_well_sources' => $source_arr,
    'pickup_branches' => $branch_arr,
  );
  $fields = variable_get('ting_ext_search_fields_settings', array());

  $fields_names = array();
  foreach ($fields as $field) {
    $fields_names[] = $field['index'];
  }
  if (arg(0) == 'search') {
    $parts = explode('/', $_GET['q']);

    // Lose 'search' and the search type.
    array_shift($parts);
    $type = array_shift($parts);
    $search_query = implode('/', $parts);
    $indexes = ting_search_extract_keys($search_query, $fields_names);
    $search_query = $indexes['q'];
    unset($indexes['q']);

    if ($type != 'ting' && !empty($indexes)) {
      $search_query .= " " . implode(' ', $indexes);
      $indexes = array();
    }

    // Set default value to the current search query.
    $form['search_block_form']['#default_value'] = $search_query;
  }

  // Hide extended search if extended search style is disabled.
  if (variable_get('ting_search_form_style', TING_SEARCH_FORM_STYLE_NORMAL) !== 'extended') {
    return array();
  }
  $show_on_search_page = variable_get('ting_extended_search_search_result', 0);
  if ($show_on_search_page) {
    $form['actions']['submit']['#attributes'] = array('class' => array('extended-search-submit'));
  }

  // Check if ting_search_terms is enabled.
  $concurent_trigger = FALSE;
  if (module_exists('ting_search_terms')) {
    $concurent_trigger = TRUE;
  }

  $path = drupal_get_path('module', 'ting_extended_search');
  $form['advanced'] = array(
    '#type' => 'fieldset',
    '#title' => t('Advanced search'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#weight' => '101',
    '#attributes' => array('id' => array('ting-extended-search-fieldset')),
    '#prefix' => '',
    '#suffix' => '',
    '#tree' => TRUE,
    '#attached' => array(
      'js' => array(
        array(
          'data' => $path . '/js/ting_extended_search.js',
        ),
        array(
          'data' => array(
            'ting_extended_search' => array(
              'ting_extended_search_foldout_event' => variable_get('ting_extended_search_foldout_event', 0),
              'ting_extended_search_search_result' => $show_on_search_page,
              'ting_extended_search_concurent_trigger' => $concurent_trigger,
            ),
          ),
          'type' => 'setting',
        ),
      ),
      'css' => array(
        $path . '/css/ting_extended_search.css',
      ),
    ),
  );

  $form['advanced']['left'] = array(
    '#prefix' => '<div class="ting-ext-search-col" id="ting-ext-search-left">',
    '#suffix' => '</div>',
  );

  $form['advanced']['right'] = array(
    '#prefix' => '<div class="ting-ext-search-col" id="ting-ext-search-right">',
    '#suffix' => '</div>',
  );

  if (!empty($indexes)) {
    $form['advanced']['#collapsed'] = FALSE;
  }

  for ($i=0; $i < count($fields); $i++) {
    if (!$fields[$i]['status'])
      continue;

    if ($fields[$i]['type'] == 'textfield') {
      $form['advanced'][$fields[$i]['column']][$fields[$i]['index']] = array(
        '#type' => $fields[$i]['type'],
        '#size' => 30,
        '#maxlength' => 64,
        '#title' => t($fields[$i]['title']),
        '#attributes' => array('placeholder' => t($fields[$i]['placeholder'])),
        '#default_value' => isset($indexes[$fields[$i]['index']]) ? $indexes[$fields[$i]['index']] : '',
      );
    }
    else {
      $form['advanced'][$fields[$i]['column']][$fields[$i]['index']]= array(
        '#type' => $fields[$i]['type'],
        '#title' => t(check_plain($fields[$i]['title'])),
        '#default_value' => isset($indexes[$fields[$i]['index']]) ? $indexes[$fields[$i]['index']] : array(),
      );
    }

    if ($fields[$i]['values']['type'] == 'custom_list') {
      $values = $fields[$i]['values']['list'];
    }
    else {
      $values = $options[$fields[$i]['values']['type']];
      if (in_array($fields[$i]['sort'], array('alphabetic_asc', 'numeric_asc'))) {
        $type = $fields[$i]['sort'] == 'alphabetic_asc' ? SORT_STRING : SORT_NUMERIC;
        ksort($values, $type);
      }
      else {
        $type = $fields[$i]['sort'] == 'alphabetic_desc' ? SORT_STRING : SORT_NUMERIC;
        krsort($values, $type);
      }
    }

    // Add sorted options to the select field types.
    if ($fields[$i]['type'] != 'textfield') {
      $values = array_merge(array('' => t($fields[$i]['placeholder'])), $values);
      $form['advanced'][$fields[$i]['column']][$fields[$i]['index']]['#options'] = $values;
    }
  }
}

/**
 * Implements hook_ting_search_fields().
 */
function ting_extended_search_ting_search_fields_alter(&$fields) {
  $settings = variable_get('ting_ext_search_fields_settings', array());
  foreach ($settings as $field) {
    $fields[$field['machine_name']] = array(
      'index' => $field['index'],
      'parents' =>  array('advanced', $field['column'], $field['index']),
    );
  }
}

/**
 * Theme function for fields settings form.
 */
function theme_ting_ext_search_fields_table(&$variables) {
  $rows = array();
  $form = $variables['form'];
  $header = $form['#header'];
  foreach (element_children($form) as $id) {
    if (is_numeric($id)) {
      $row = array();
      foreach (element_children($form[$id]) as $child_id) {
        if ($child_id == 'values') {
          $row[] = drupal_render($form[$id][$child_id]['type']) . drupal_render($form[$id][$child_id]['list']);
        } else {
          $row[] = drupal_render($form[$id][$child_id]);
        }
      }
      $rows[] = $row;
    }
  }

  $output = theme('table', array(
    'header' => $header,
    'rows' => $rows,
  ));

  $output .= drupal_render_children($form);

  return $output;
}

/**
 * Theme function for display settings form.
 */
function theme_ting_ext_search_display_table(&$variables) {
  $form = $variables['form'];
  $header = $form['#header'];
  $rows = array();

  foreach (element_children($form) as $id) {
      $row = array(
        'data' => array(),
        'class' => array('draggable'),
      );
      foreach (element_children($form[$id]) as $child_id) {
          $row['data'][] = drupal_render($form[$id][$child_id]);
      }
      $rows[] = $row;
  }

  drupal_add_tabledrag('ting-ext-search-display-table', 'order', 'sibling', 'display-weight');

  $output = theme('table', array(
    'header' => $header,
    'rows' => $rows,
    'attributes' => array('id' => 'ting-ext-search-display-table'),
  ));

  $output .= drupal_render_children($form);

  return $output;
}

/**
 * Implements hook_features_pre_restore().
 */
function ting_extended_search_features_pre_restore($op, $items) {
  $settings = variable_get('ting_ext_search_fields_settings', []);
  $feature = feature_load('ting_extended_search');
  $feature_status = features_detect_overrides($feature);
  $overridden = TRUE;
  if (!isset($feature_status['variable'])) {
    return;
  }

  // Compare 'variable' feature's component state in order to ensure if it was
  // overridden or not.
  if ($feature_status['variable']['normal'] == $feature_status['variable']['default']) {
    $overridden = FALSE;
  }

  // If we have empty extended search 'settings' variable and the feature is
  // overridden, then unlock the feature and give the possibility to restore it
  // to the default state.
  if (empty($settings) && $overridden == TRUE) {
    features_feature_unlock('ting_extended_search', 'variable');
  }

  // If we already have any data in extended search 'settings', then lock this
  // feature component so it won't be reverted to the default state.
  if (!empty($settings)) {
    if (isset($items['ting_extended_search']) && in_array('variable', $items['ting_extended_search'])) {
      features_feature_lock('ting_extended_search', 'variable');
    }
  }
}
