<?php
/**
 * @file
 * Add extended search form.
 */
/**
 * Implements hook_menu().
 */
function ting_extended_search_menu() {
  $items = array();

  $items['admin/config/ting/extented_search'] = array(
    'title' => 'Ting extended search fields',
    'description' => 'View and customize ting extended search fields.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ting_extended_search_settings_fields_form'),
    'access arguments' => array('access ting extended search settings'),
    'file' => 'ting_extended_search.admin.inc',
    'weight' => -10,
  );

  $items['admin/config/ting/extented_search/fields'] = array(
    'title' => 'Ting extended search fields',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );

  $items['admin/config/ting/extented_search/display'] = array(
    'title' => 'Ting extended search display',
    'description' => 'View and customize  ting extended search display.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ting_extended_search_settings_display_form'),
    'access arguments' => array('access ting extended search settings'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'ting_extended_search.admin.inc',
    'weight' => -9,
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function ting_extended_search_permission() {
  return array(
    'access ting extended search settings' =>  array(
      'title' => t('Ting extented search settings'),
      'description' => t('Allows edit settings of ting extented search'),
    ),
  );
}

/**
 * Implements hook_theme().
 */
function ting_extended_search_theme($existing, $type, $theme, $path) {
  return array(
    'ting_ext_search_fields_table' => array(
      'render element' => 'form',
    ),
    'ting_ext_search_display_table' => array(
      'render element' => 'form',
    ),
  );
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function ting_extended_search_form_search_block_form_alter(&$form, &$form_state) {
  drupal_add_css(drupal_get_path('module', 'ting_extended_search') . '/css/ting_extended_search.css', array('type' => 'file'));

  $ting_well_types = variable_get('ting_well_types', array());
  $ting_well_sources = variable_get('ting_well_sources', array());

  $branch_arr = ding_provider_invoke('reservation', 'pickup_branches');
  $type_arr = drupal_map_assoc(array_keys($ting_well_types));
  $source_arr = drupal_map_assoc(array_keys($ting_well_sources));

  asort($type_arr);
  asort($branch_arr);
  asort($source_arr);

  $options = array(
    'ting_well_types' => $type_arr,
    'ting_well_sources' => $source_arr,
    'pickup_branches' => $branch_arr,
  );

  $fields = variable_get('ting_ext_search_fields_settings', array());
  $display = variable_get('ting_ext_search_display_settings', array());
  $fields_names = array();
  foreach ($fields as $field) {
    $fields_names[] = $field['index'];
  }
  if (arg(0) == 'search') {
    $parts = explode('/', $_GET['q']);

    // Lose 'search' and the search type.
    array_shift($parts);
    $type = array_shift($parts);
    $search_query = implode('/', $parts);
    $indexes = ting_search_extract_keys($search_query, $fields_names);
    $search_query = $indexes['q'];
    unset($indexes['q']);

    if ($type != 'ting' && !empty($indexes)) {
      $search_query .= " " . implode(' ', $indexes);
      $indexes = array();
    }

    // Set default value to the current search query.
    $form['search_block_form']['#default_value'] = $search_query;
  }

  $form['advanced'] = array(
    '#type' => 'fieldset',
    '#title' => t('Advanced search'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#weight' => '101',
    '#class' => 'extendsearch-advanced',
    '#prefix' => '',
    '#suffix' => '',
    '#tree' => TRUE,
    '#attached' => array(
      'js' => array(
        drupal_get_path('module', 'ting_extended_search') . '/js/ting_extended_search.js',
      ),
    ),
  );

  $form['advanced']['left'] = array(
    '#prefix' => '<div id="ting-ext-search-left">',
    '#suffix' => '</div>',
  );

  $form['advanced']['right'] = array(
    '#prefix' => '<div id="ting-ext-search-right">',
    '#suffix' => '</div>',
  );

  if (!empty($indexes)) {
    $form['advanced']['#collapsed'] = FALSE;
  }
  for ($i=0; $i < count($fields); $i++) {
    if (!$display[$i]['status'])
      continue;
    if ($fields[$i]['type'] == 'textfield') {
      $form['advanced'][$display[$i]['column']][$fields[$i]['index']] = array(
        '#type' => $fields[$i]['type'],
        '#size' => 30,
        '#maxlength' => 64,
        '#title' => $fields[$i]['title'],
        '#attributes' =>array('placeholder' => $fields[$i]['placeholder']),
        '#default_value' => isset($indexes[$fields[$i]['index']]) ? $indexes[$fields[$i]['index']] : '',
      );
    }
    else {
      $form['advanced'][$display[$i]['column']][$fields[$i]['index']] = array(
        '#type' => $fields[$i]['type'],
        '#title' => check_plain($fields[$i]['title']),
        '#default_value' => isset($indexes[$fields[$i]['index']]) ? $indexes[$fields[$i]['index']] : '',
      );

      if ($fields[$i]['values']['type'] == 'custom_list') {
        $values = array_merge(array('' => $fields[$i]['placeholder']), $fields[$i]['values']['list']);
        $form['advanced'][$display[$i]['column']][$fields[$i]['index']]['#options'] = $values;
      } else {
        $values = $options[$fields[$i]['values']['type']];
        if (in_array($display[$i]['sort'], array('alphabetic_asc', 'numeric_asc'))) {
          $type = $display[$i]['sort'] == 'alphabetic_asc' ? SORT_STRING : SORT_NUMERIC;
          sort($values, $type);
        } else {
          $type = $display[$i]['sort'] == 'alphabetic_desc' ? SORT_STRING : SORT_NUMERIC;
          rsort($values, $type);
        }
        if ($fields[$i]['values']['type'] == 'dropdown') {
          $values = array_merge(array('' => $fields[$i]['placeholder']), $values);
        }
        $form['advanced'][$display[$i]['column']][$fields[$i]['index']]['#options'] = $values;
      }
    }
  }

  // Override default search submit callback.
  if ($form['#submit'][0] === 'ting_search_submit') {
    unset($form['#submit'][0]);
    $form['#submit'] = array('ting_extended_search_submit');
  }
}

/**
 * Form submission handler for search_block_form().
 *
 * @see ting_extended_search_form_search_block_form_alter()
 */
function ting_extended_search_submit(&$form, &$form_state) {
  $controls = array();
  // The search form relies on control of the redirect destination for its
  // functionality, so we override any static destination set in the request,
  // for example by drupal_access_denied() or drupal_not_found()
  // (see http://drupal.org/node/292565).
  if (isset($_GET['destination'])) {
    unset($_GET['destination']);
  }

  $form_id = $form['form_id']['#value'];
  $keys = $form_state['values'][$form_id];
  $values = $form_state['values']['advanced'];
  $fields = array();

  foreach ($values as $column) {
    foreach ($column as $index => $value) {
      if (empty($value)) {
        $fields[] = $index . '=' . (strpos($value, ' ') ? '"' . $value . '"' : $value);
      }
    }
  }

  $q = array();
  if (!empty($keys)) {
    $q[] = $keys;
  }
  if (!empty($fields)) {
    $q[] = '(' . implode(' AND ', $fields) . ')';
  }
  $q = implode(' AND ', $q);

  $s = $form_state['values']['sort'];
  if ($s != "") {
    $controls['sort'] = $s;
  }

  $s = $form_state['values']['size'];
  if ($s != "") {
    $controls['size'] = $s;
  }

  // Check to see if the form was submitted empty.
  // If it is empty, display an error message.
  // (This method is used instead of setting #required to TRUE for this field
  // because that results in a confusing error message.  It would say a plain
  // "field is required" because the search keywords field has no title.
  // The error message would also complain about a missing #title field.)
  if (empty($q)) {
    form_set_error('keys', t('Please enter some keywords.'));
  }
  $search_info = array();
  $request_path = arg();

  if ($request_path[0] != 'search' || !isset($request_path[1])) {
    $search_info = search_get_default_module_info();
  }
  else {
    foreach (search_get_info() as $search_engine) {
      if ($search_engine['path'] == $request_path[1]) {
        $search_info = $search_engine;
        break;
      }
    }
  }
  if (!empty($search_info['path']) && in_array($search_info['module'], variable_get('search_active_modules', array()))) {
    $form_state['redirect'] = FALSE;
    $url = 'search/' . $search_info['path'] . '/' . trim($q);
    drupal_goto($url, array('query' => $controls));
  }
  else {
    form_set_error(NULL, t('Search is currently disabled.'), 'error');
  }
}

/**
 * Theme function for fields settings form.
 */
function theme_ting_ext_search_fields_table(&$variables) {
  $form = $variables['form'];
  $header = $form['#header'];
  foreach (element_children($form) as $id) {
    if (is_numeric($id)) {
      $row = array();
      foreach (element_children($form[$id]) as $child_id) {
        if ($child_id == 'values') {
          $row[] = drupal_render($form[$id][$child_id]['type']) . drupal_render($form[$id][$child_id]['list']);
        } else {
          $row[] = drupal_render($form[$id][$child_id]);
        }
      }
      $rows[] = $row;
    }
  }

  $output = theme('table', array(
    'header' => $header,
    'rows' => $rows,
  ));

  $output .= drupal_render_children($form);

  return $output;
}

/**
 * Theme function for display settings form.
 */
function theme_ting_ext_search_display_table(&$variables) {
  $form = $variables['form'];
  $header = $form['#header'];
  $rows = array();

  foreach (element_children($form) as $id) {
      $row = array(
        'data' => array(),
        'class' => array('draggable'),
      );
      foreach (element_children($form[$id]) as $child_id) {
          $row['data'][] = drupal_render($form[$id][$child_id]);
      }
      $rows[] = $row;
  }

  drupal_add_tabledrag('ting-ext-search-display-table', 'order', 'sibling', 'display-weight');

  $output = theme('table', array(
    'header' => $header,
    'rows' => $rows,
    'attributes' => array('id' => 'ting-ext-search-display-table'),
  ));

  $output .= drupal_render_children($form);

  return $output;
}
